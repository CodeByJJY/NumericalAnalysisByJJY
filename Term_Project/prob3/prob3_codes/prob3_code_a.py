import numpy as np
import matplotlib.pyplot as plt

# ---------------------------------------
# Step 1: Define data function
# ---------------------------------------
def temperature_data():
    t = np.array([
    59.0, 57.9, 57.0, 57.0, 55.9, 57.0, 57.0, 60.1, 62.1, 64.0, 64.9, 66.0, 69.1, 68.0, 69.1, 66.0, 64.0, 62.1, 60.1, 59.0, 57.9, 57.9, 59.0, 57.9,  # May 1
    57.9, 57.9, 57.0, 57.0, 57.0, 57.9, 57.9, 59.0, 61.0, 62.1, 64.0, 64.0, 64.0, 64.9, 64.9, 64.9, 64.0, 62.1, 61.0, 59.0, 59.0, 59.0, 59.0, 59.0,  
    59.0, 59.0, 57.9, 57.9, 57.9, 57.0, 59.0, 62.1, 64.0, 64.9, 66.0, 66.9, 66.9, 66.0, 68.0, 66.9, 64.0, 61.0, 60.1, 59.0, 57.9, 57.0, 57.9, 57.9,
    57.0, 57.0, 57.0, 57.0, 57.9, 57.9, 57.9, 59.0, 59.0, 57.9, 59.0, 62.1, 64.0, 64.0, 64.0, 64.0, 63.0, 61.0, 61.0, 60.1, 60.1, 60.1, 60.1, 60.1,
    60.1, 59.0, 59.0, 59.0, 60.1, 60.1, 60.1, 60.1, 61.0, 63.0, 63.0, 63.0, 64.9, 66.0, 68.0, 66.9, 66.9, 64.0, 63.0, 62.1, 62.1, 60.1, 60.1, 59.0,
    57.9, 57.9, 59.0, 59.0, 57.9, 57.9, 59.0, 60.1, 60.1, 61.0, 63.0, 64.9, 64.9, 66.0, 66.9, 66.9, 64.9, 64.0, 62.1, 60.1, 60.1, 60.1, 60.1, 59.0,
    59.0, 60.1, 59.0, 59.0, 59.0, 59.0, 57.0, 57.9, 59.0, 60.1, 59.0, 64.0, 66.0, 66.0, 66.0, 64.9, 64.9, 64.0, 62.1, 61.0, 61.0, 60.1, 60.1, 60.1,
    60.1, 59.0, 59.0, 57.9, 57.9, 57.9, 57.9, 59.0, 61.0, 63.0, 64.0, 64.9, 66.0, 66.0, 64.9, 64.9, 64.0, 63.0, 62.1, 61.0, 61.0, 60.1, 60.1, 60.1,
    59.0, 60.1, 59.0, 59.0, 57.9, 57.9, 59.0, 60.1, 61.0, 61.0, 62.1, 63.0, 64.0, 64.9, 64.0, 64.9, 64.0, 63.0, 61.0, 60.1, 59.0, 59.0, 59.0, 59.0,
    59.0, 59.0, 57.9, 57.9, 59.0, 59.0, 60.1, 60.1, 61.0, 62.1, 63.0, 64.0, 64.9, 66.9, 66.9, 66.9, 64.9, 63.0, 62.1, 61.0, 60.1, 60.1, 60.1, 60.1,
    60.1, 60.1, 59.0, 60.1, 59.0, 60.1, 60.1, 61.0, 61.0, 62.1, 63.0, 64.9, 66.9, 66.9, 66.0, 64.9, 63.0, 62.1, 61.0, 61.0, 60.1, 59.0, 59.0, 57.9,
    57.9, 57.9, 57.0, 57.9, 57.9, 57.9, 57.9, 59.0, 61.0, 64.0, 64.0, 64.0, 64.9, 64.9, 64.9, 64.0, 62.1, 61.0, 61.0, 60.1, 60.1, 60.1, 60.1, 60.1,
    59.0, 59.0, 60.1, 60.1, 60.1, 60.1, 60.1, 61.0, 62.1, 62.1, 63.0, 64.0, 69.1, 68.0, 68.0, 66.0, 64.9, 63.0, 63.0, 62.1, 62.1, 62.1, 62.1, 61.0,
    63.0, 62.1, 61.0, 61.0, 61.0, 61.0, 61.0, 62.1, 62.1, 64.9, 64.9, 64.9, 66.9, 66.9, 66.0, 66.0, 64.9, 64.0, 62.1, 61.0, 61.0, 61.0, 61.0, 62.1,
    63.0, 62.1, 62.1, 62.1, 62.1, 62.1, 62.1, 62.1, 63.0, 64.0, 66.0, 68.0, 70.0, 69.1, 68.0, 66.9, 66.9, 64.9, 64.0, 62.1, 61.0, 61.0, 61.0, 61.0,
    61.0, 62.1, 62.1, 62.1, 61.0, 62.1, 62.1, 63.0, 63.0, 63.0, 64.9, 66.9, 68.0, 68.0, 68.0, 68.0, 66.9, 64.9, 64.0, 62.1, 63.0, 62.1, 62.1, 62.1,
    62.1, 61.0, 61.0, 61.0, 61.0, 61.0, 62.1, 62.1, 64.0, 64.0, 66.0, 66.9, 66.9, 68.0, 68.0, 66.9, 66.0, 64.9, 63.0, 62.1, 62.1, 62.1, 61.0, 61.0,
    62.1, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 62.1, 62.1, 63.0, 63.0, 62.1, 63.0, 62.1, 62.1, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0,
    61.0, 62.1, 61.0, 61.0, 61.0, 61.0, 61.0, 62.1, 62.1, 63.0, 64.0, 64.9, 64.9, 66.9, 66.9, 66.9, 64.9, 63.0, 62.1, 61.0, 61.0, 61.0, 61.0, 60.1,
    60.1, 60.1, 60.1, 59.0, 57.9, 59.0, 59.0, 61.0, 62.1, 66.0, 64.0, 64.0, 64.0, 64.9, 64.9, 62.1, 63.0, 61.0, 61.0, 59.0, 59.0, 57.9, 57.9, 57.9,
    57.0, 57.0, 55.9, 57.0, 57.0, 55.9, 57.0, 60.1, 62.1, 62.1, 64.0, 64.0, 64.9, 64.0, 64.0, 63.0, 63.0, 62.1, 61.0, 60.1, 60.1, 60.1, 59.0, 59.0,
    57.9, 57.9, 57.0, 54.0, 55.0, 54.0, 57.0, 59.0, 61.0, 64.9, 66.0, 66.9, 66.9, 66.0, 66.0, 66.0, 64.9, 64.0, 64.0, 61.0, 61.0, 60.1, 60.1, 59.0,
    57.9, 57.0, 57.9, 57.0, 55.9, 57.0, 57.9, 61.0, 63.0, 64.0, 66.9, 69.1, 70.0, 70.0, 70.0, 66.0, 66.0, 63.0, 62.1, 60.1, 59.0, 59.0, 57.9, 57.9,
    57.9, 57.9, 57.9, 57.9, 57.9, 57.9, 59.0, 62.1, 62.1, 63.0, 64.0, 66.0, 66.0, 64.9, 64.9, 64.9, 64.9, 63.0, 61.0, 61.0, 60.1, 60.1, 60.1, 59.0,
    57.9, 57.9, 57.9, 57.0, 57.0, 57.0, 57.9, 60.1, 61.0, 62.1, 63.0, 64.0, 64.0, 64.0, 64.0, 66.0, 64.9, 64.0, 62.1, 60.1, 60.1, 59.0, 57.9, 57.9,
    57.9, 57.9, 57.9, 55.9, 55.9, 57.0, 59.0, 61.0, 63.0, 64.0, 66.0, 66.0, 68.0, 68.0, 66.9, 64.9, 64.0, 63.0, 63.0, 61.0, 60.1, 60.1, 60.1, 60.1,
    59.0, 59.0, 59.0, 59.0, 57.9, 57.9, 60.1, 61.0, 63.0, 62.1, 64.9, 66.0, 66.9, 68.0, 68.0, 66.9, 66.0, 64.0, 61.0, 61.0, 60.1, 60.1, 60.1, 60.1,
    60.1, 61.0, 61.0, 60.1, 60.1, 60.1, 60.1, 61.0, 62.1, 63.0, 63.0, 64.0, 66.0, 66.9, 66.0, 64.0, 63.0, 62.1, 61.0, 60.1, 59.0, 59.0, 59.0, 60.1,
    60.1, 60.1, 60.1, 60.1, 60.1, 59.0, 60.1, 61.0, 62.1, 64.9, 64.9, 66.0, 66.9, 66.9, 66.0, 66.0, 66.0, 64.0, 62.1, 61.0, 60.1, 60.1, 60.1, 59.0,
    59.0, 59.0, 57.9, 57.9, 59.0, 60.1, 60.1, 61.0, 63.0, 63.0, 64.0, 64.9, 66.9, 68.0, 66.0, 66.0, 64.9, 63.0, 62.1, 61.0, 60.1, 61.0, 60.1, 59.0,
    59.0, 59.0, 59.0, 59.0, 60.1, 60.1, 61.0, 61.0, 62.1, 63.0, 63.0, 64.9, 68.0, 68.0, 68.0, 66.0, 64.9, 63.0, 62.1, 62.1, 62.1, 62.1, 62.1, 63.0 ])
    return t

# ---------------------------------------
# Step 2: Load data
# ---------------------------------------
z = temperature_data()      # Time series data (length 744)
T = len(z)                  # Total length T = 744
M = 8                       # AR model memory size
N = T - M                   # Number of usable samples = 736

# ---------------------------------------
# Step 3: Build design matrix X and target vector y
# ---------------------------------------
X = np.zeros((N, M))        # Input: previous M values
y = np.zeros(N)             # Output: next time point

for i in range(N):
    X[i, :] = z[i:i+M][::-1]  # Most recent to oldest
    y[i] = z[i + M]           # Actual next value

# ---------------------------------------
# Step 4: Estimate theta using least squares
# ---------------------------------------
theta = np.linalg.lstsq(X, y, rcond=None)[0]  # Solve Normal Equation

# Compute predictions
y_pred = X @ theta

# ---------------------------------------
# Step 5: Compute RMS error
# ---------------------------------------
rms_error = np.sqrt(np.mean((y - y_pred) ** 2))

# ---------------------------------------
# Step 6: Display results and plot
# ---------------------------------------
print("AR(8) coefficients (theta):")
print(theta)
print(f"RMS Error: {rms_error:.4f}")

# Plot actual vs. predicted values (optional)
plt.figure(figsize=(10, 4))
plt.plot(range(N), y, label='Actual', alpha=0.7)
plt.plot(range(N), y_pred, label='Predicted', linestyle='--')
plt.xlabel('Time Step')
plt.ylabel('Temperature')
plt.title('AR(8) Prediction vs. Actual')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
